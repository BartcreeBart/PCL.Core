// ** 使用 IDE 删除该文件可能导致项目配置文件中的引用被删除，请谨慎操作 **
// <auto-generated />
// 此文件由 MSBuild 自动生成，请勿手动修改

using System;

namespace PCL.Core.LifecycleManagement
{
    /// <summary>
    /// 包含所有使用 LifecycleService 注解的类型，按 StartState 分类并按 Priority 降序排序
    /// </summary>
    public static class LifecycleServiceTypes
    {
        /// <summary>
        /// BeforeLoading 状态的生命周期服务类型
        /// </summary>
        public static readonly Type[] BeforeLoading = new Type[]
        {
            typeof(PCL.Core.LifecycleManagement.Lifecycle), // Priority: 2147483647
        };

        /// <summary>
        /// Loading 状态的生命周期服务类型
        /// </summary>
        public static readonly Type[] Loading = new Type[]
        {
            typeof(PCL.Core.Service.ApplicationService), // Priority: 2147483647
        };

        /// <summary>
        /// WindowCreating 状态的生命周期服务类型
        /// </summary>
        public static readonly Type[] WindowCreating = new Type[]
        {
            typeof(PCL.Core.Service.MainWindowService), // Priority: 2147483647
            typeof(PCL.Core.Service.MainWindowStartService), // Priority: -2147483648
        };

        /// <summary>
        /// 获取指定生命周期状态的所有服务类型
        /// </summary>
        /// <param name="state">生命周期状态</param>
        /// <returns>该状态下的所有服务类型数组</returns>
        public static Type[] GetServiceTypes(LifecycleState state)
        {
            return state switch
            {
                LifecycleState.BeforeLoading => BeforeLoading,
                LifecycleState.Loading => Loading,
                LifecycleState.WindowCreating => WindowCreating,
                _ => new Type[0]
            };
        }

        /// <summary>
        /// 获取所有生命周期服务类型的状态映射
        /// </summary>
        /// <returns>状态到类型数组的字典</returns>
        public static System.Collections.Generic.Dictionary<LifecycleState, Type[]> GetAllServiceTypes()
        {
            return new System.Collections.Generic.Dictionary<LifecycleState, Type[]>
            {
                { LifecycleState.BeforeLoading, BeforeLoading },
                { LifecycleState.Loading, Loading },
                { LifecycleState.WindowCreating, WindowCreating },
            };
        }
    }
}
