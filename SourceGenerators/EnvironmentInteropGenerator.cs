using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Diagnostics;
using Microsoft.CodeAnalysis.Text;
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Text;

namespace PCL.SourceGenerators
{
    [Generator]
    public class EnvironmentInteropGenerator : IIncrementalGenerator
    {
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            // 获取编译选项中的MSBuild属性
            var analyzerConfigProvider = context.AnalyzerConfigOptionsProvider;

            // 注册源代码输出
            context.RegisterSourceOutput(analyzerConfigProvider, static (spc, configProvider) => Execute(spc, configProvider));
        }

        private static void Execute(SourceProductionContext context, AnalyzerConfigOptionsProvider configProvider)
        {
            var pairs = new List<(string Key, string Value)>();

            // 尝试从全局选项中获取环境变量信息（通过MSBuild传递）
            if (configProvider.GlobalOptions.TryGetValue("build_property.PCL_WRITE_SECRET", out var writeSecretValue) &&
                !string.IsNullOrWhiteSpace(writeSecretValue))
            {
                // PCL_WRITE_SECRET存在，查找所有PCL_开头的MSBuild属性
                var globalOptions = configProvider.GlobalOptions;
                
                // 遍历所有全局选项
                var pclProperties = new List<KeyValuePair<string, string>>();
                foreach (var key in new[]
                {
                    "build_property.PCL_API_KEY",
                    "build_property.PCL_SECRET_KEY", 
                    "build_property.PCL_AUTH_TOKEN",
                    "build_property.PCL_SERVER_URL",
                    "build_property.PCL_CLIENT_ID",
                    "build_property.PCL_CLIENT_SECRET"
                })
                {
                    if (globalOptions.TryGetValue(key, out var value) && !string.IsNullOrWhiteSpace(value))
                    {
                        var envVarName = key.Replace("build_property.PCL_", "");
                        pairs.Add((envVarName, ToVerbatimString(value)));
                    }
                }
            }

            var sb = new StringBuilder();
            sb.AppendLine("// ** 使用 IDE 删除该文件可能导致项目配置文件中的引用被删除，请谨慎操作 **");
            sb.AppendLine("// <auto-generated />");
            sb.AppendLine("// 此文件由 Source Generator 自动生成，请勿手动修改");
            sb.AppendLine();
            sb.AppendLine("#nullable enable");
            sb.AppendLine();
            sb.AppendLine("namespace PCL.Core.Utils.OS;");
            sb.AppendLine();
            sb.AppendLine("partial class EnvironmentInterop");
            sb.AppendLine("{");
            sb.AppendLine("    private static readonly System.Collections.Generic.Dictionary<string, string> SecretDictionary = new()");
            sb.AppendLine("    {");

            foreach (var (key, value) in pairs.OrderBy(p => p.Key))
            {
                sb.AppendLine($"        [\"{key}\"] = {value},");
            }

            sb.AppendLine("    };");
            sb.AppendLine();
            sb.AppendLine("    /// <summary>");
            sb.AppendLine("    /// 获取环境秘密字典中的所有键");
            sb.AppendLine("    /// </summary>");
            sb.AppendLine("    /// <returns>所有可用的环境秘密键</returns>");
            sb.AppendLine("    public static System.Collections.Generic.IEnumerable<string> GetSecretKeys()");
            sb.AppendLine("    {");
            sb.AppendLine("        return SecretDictionary.Keys;");
            sb.AppendLine("    }");
            sb.AppendLine();
            sb.AppendLine("    /// <summary>");
            sb.AppendLine("    /// 获取指定键的环境秘密值");
            sb.AppendLine("    /// </summary>");
            sb.AppendLine("    /// <param name=\"key\">环境秘密键</param>");
            sb.AppendLine("    /// <returns>对应的环境秘密值，如果不存在则返回null</returns>");
            sb.AppendLine("    public static string? GetSecret(string key)");
            sb.AppendLine("    {");
            sb.AppendLine("        return SecretDictionary.TryGetValue(key, out var value) ? value : null;");
            sb.AppendLine("    }");
            sb.AppendLine();
            sb.AppendLine("    /// <summary>");
            sb.AppendLine("    /// 检查是否存在指定的环境秘密键");
            sb.AppendLine("    /// </summary>");
            sb.AppendLine("    /// <param name=\"key\">环境秘密键</param>");
            sb.AppendLine("    /// <returns>如果键存在返回true，否则返回false</returns>");
            sb.AppendLine("    public static bool HasSecret(string key)");
            sb.AppendLine("    {");
            sb.AppendLine("        return SecretDictionary.ContainsKey(key);");
            sb.AppendLine("    }");
            sb.AppendLine("}");

            context.AddSource("EnvironmentInterop.g.cs", SourceText.From(sb.ToString(), Encoding.UTF8));
        }

        private static string ToVerbatimString(string text)
        {
            return "@\"" + text.Replace("\"", "\"\"") + "\"";
        }
    }
}